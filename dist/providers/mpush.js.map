{"version":3,"sources":["../../src/providers/mpush.ts"],"names":[],"mappings":"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","file":"mpush.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Device } from '@ionic-native/device';\nimport { Storage } from '@ionic/storage';\nimport { Log } from './log';\n\nexport enum UserIdType {\n  DNI,\n  EMAIL,\n  NUUMA,\n  USUARIOAMA,\n  USUARIOCIS\n}\n\n\nexport class MPush {\n\n  private baseUrl: string;\n  private userIdType: UserIdType;\n  private user: string;\n  private password: string;\n\n\n  private static readonly USUNM = 'usunm';\n\n  constructor(\n    private http: HttpClient,\n    private device: Device,\n    private storage: Storage,\n    private log: Log\n  ) {}\n\n  init(baseUrl: string, mpushClientApp: string, userIdType: UserIdType) {\n    this.baseUrl = `${baseUrl}/${mpushClientApp}`;\n    this.userIdType = userIdType;\n  }\n\n  setCredentials(user: string, password: string) {\n    this.user = user;\n    this.password = password;\n  }\n\n  register(user: string) {\n    this.checkIfIsInitialized();\n    return this.storage.ready()\n      .then(() => {\n        return this.storage.get(MPush.USUNM);\n      })\n      .then(usunm => {\n        return this.doRegister(user, usunm);\n      });\n  }\n\n  forceNewRegister(user: string) {\n    this.checkIfIsInitialized();\n    return this.doRegister(user, null);\n  }\n\n  unregister(userValue: string) {\n    this.checkIfIsInitialized();\n    return new Promise<void>((resolve, reject) => {\n      let currentUsunm: string = null;\n      this.storage.ready()\n        .then(() => this.storage.get(MPush.USUNM))\n        .then(usunm => {\n          currentUsunm = usunm;\n          return this.getChannelId();\n        })\n        .then(channelId => {\n          let url = `${this.baseUrl}/unregisterUser`;\n          let options: any = {};\n          if (this.user && this.password) {\n            let encodedCredentials = btoa(`${this.user}:${this.password}`);\n            let headers = new HttpHeaders();\n            headers = headers.append('Authorization', `Basic ${encodedCredentials}`);\n            options.headers = headers;\n          }\n          let body: any = {\n            'technology': this.device.platform,\n            'userIdTypeKey': UserIdType[this.userIdType],\n            'userIdTypeValue': userValue,\n          };\n          if (currentUsunm) body.usunm = currentUsunm;\n          if (channelId) body.urbanChannel = channelId;\n          this.http.post(url, body, options).toPromise()\n            .then(() => {\n              this.log.i('[MPUSH] Usunm was unregistered successfully');\n              UAirship.setAlias('', () => { resolve(); });\n            })\n            .catch(err => {\n              this.log.e(`[MPUSH] Error unregistering user from MPush. Reason: ${this.safeStringify(err)}`);\n              reject(err);\n            });\n        });\n    });\n  }\n\n  getUsunm() {\n    return this.storage.get(MPush.USUNM);\n  }\n\n  private doRegister(userValue: string, usunm: string) {\n    return new Promise<void>((resolve, reject) => {\n      this.getChannelId()\n        .then(channelId => {\n          let url = this.baseUrl;\n          let options: { headers: any, responseType: 'json' } = { headers: null, responseType: 'json'};\n          if (this.user && this.password) {\n            let encodedCredentials = btoa(`${this.user}:${this.password}`);\n            let headers = new HttpHeaders();\n            headers = headers.append('Authorization', `Basic ${encodedCredentials}`);\n            options.headers = headers;\n          }\n          let body: any = {\n            'technology': this.device.platform,\n            'userIdTypeKey': UserIdType[this.userIdType],\n            'userIdTypeValue': userValue,\n          };\n          if (usunm) body.usunm = usunm;\n          if (channelId) body.urbanChannel = channelId;\n\n          this.http.post(url, body, options).toPromise()\n            .then((response: any) => {\n              let currentUsunm = response.usunm;\n              if (currentUsunm) {\n                UAirship.setAlias(currentUsunm, () => {\n                  this.log.i(`[MPUSH] Device usunm ${currentUsunm}`);\n                  this.storage.ready().then(() => this.storage.set(MPush.USUNM, currentUsunm));\n                });\n              } else {\n                this.log.e('[MPUSH] Error getting usunm.');\n              }\n              resolve();\n            })\n            .catch(err => {\n              this.log.e(`[MPUSH] Error registering user in MPush. Reason: ${this.safeStringify(err)}`);\n              let response = err.json ? err.json() : err.error;\n              let unknownUsunm = 8;\n              if (response.code && response.code == unknownUsunm) {\n                this.log.w('[MPUSH] Usunm not registered in mpush and trying to obtain new one');\n                this.storage.ready()\n                  .then(() => this.storage.remove(MPush.USUNM))\n                  .then(() => this.doRegister(userValue, null))\n                  .then(() => resolve())\n                  .catch(err => reject(err));\n              } else reject(err);\n            });\n        })\n        .catch(err => reject(err));\n    });\n  }\n\n  private getChannelId() {\n    let maxTimeout = 10000;\n    let promise = new Promise<string>((resolve, reject) => {\n      UAirship.getChannelID((channelId => resolve(channelId)));\n    });\n    return this.promiseTimeout(maxTimeout, promise);\n  }\n\n  private checkIfIsInitialized() {\n    if (this.baseUrl == null) {\n      throw('MPush is not initialized');\n    }\n  }\n\n  private promiseTimeout<T>(milis: number, promise: Promise<T>) {\n    // Create a promise that rejects in <ms> milliseconds\n    let timeout = new Promise((resolve, reject) => {\n      let id = setTimeout(() => {\n        clearTimeout(id);\n        reject('Timed out in ' + milis + 'ms.');\n      }, milis);\n    });\n\n    // Returns a race between our timeout and the passed in promise\n    return Promise.race([promise, timeout]);\n  }\n\n  private safeStringify(e) {\n    try {\n      return JSON.stringify(e);\n    } catch {\n      return 'Error on parse json error';\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: Device, },\n{type: Storage, },\n{type: Log, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}