{"version":3,"sources":["../../src/providers/http-cache-interceptor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAY,MAAA,EAAQ,cAAA,EAAe,MAAO,eAAA,CAAgB;AACnE,OAAO,EAAwD,YAAA,EAAa,MAAO,sBAAA,CAAuB;AAC1G,OAAO,EAAE,UAAA,EAAW,MAAO,SAAA,CAAU;AAErC,MAAM,CAAC,IAAM,oCAAA,GAAuC,IAAI,cAAA,CAAsB,gBAAE,CAAgB,CAAC;AAGjG;IASE,8BAAa,QAAgB;QAPrB,UAAK,GAAG,IAAI,GAAG,EAA8D,CAAC;QAE9E,iBAAY,GAAG,IAAI,CAAC;QAM1B,IAAI,CAAC,YAAY,GAAG,QAAQ,IAAI,IAAI,CAAC;IACvC,CAAC;IAED,wCAAS,GAAT,UAAU,GAAqB,EAAE,IAAiB;QAAlD,iBAyBC;QAxBC,IAAI,WAAW,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;QACpE,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAEnF,IAAI,GAAG,CAAC,MAAM,KAAK,KAAK,IAAI,CAAC,WAAW,EAAE;YACxC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACzB;QAED,IAAI,WAAW,IAAI,oBAAoB,CAAC,wBAAwB,EAAE;YAChE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACnB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACzB;QAED,IAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACzD,IAAI,cAAc,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,EAAE;YAC5D,OAAO,UAAU,CAAC,EAAE,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;SAC/C;QAED,IAAM,aAAa,GAAG,CAAC,WAAW,IAAI,oBAAoB,CAAC,2BAA2B,CAAC,CAAC;QAExF,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,UAAA,KAAK;YAC9B,IAAI,KAAK,YAAY,YAAY,IAAI,aAAa,EAAE;gBAClD,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,EAAE,QAAQ,EAAE,KAAK,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;aACvF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,+CAAgB,GAAxB,UAAyB,cAAmB;QAC1C,IAAI,CAAC,IAAI,CAAC,YAAY;YAAE,OAAO,KAAK,CAAC;QACrC,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,cAAc,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC;IAC7E,CAAC;IAtCuB,gCAAW,GAAG,mBAAmB,CAAC;IAClC,gDAA2B,GAAG,gBAAgB,CAAC;IAC/C,6CAAwB,GAAG,aAAa,CAAC;IAsC5D,+BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,mCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,oCAAoC,EAAG,EAAE,EAAG,EAAC;KAClG,EAF6F,CAE7F,CAAC;IACF,2BAAC;CApDD,AAoDC,IAAA;SApDY,oBAAoB","file":"http-cache-interceptor.js","sourceRoot":"","sourcesContent":["import { Injectable, Inject, InjectionToken } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Rx';\n\nexport const HTTP_CACHE_INTERCEPTOR_DURATION_MINS = new InjectionToken<number>('httpCache.mins');\n\n\nexport class HttpCacheInterceptor implements HttpInterceptor {\n\n  private cache = new Map<string, { response: HttpResponse<any>, timestamp: number }>();\n\n  private durationMins = null;\n  private static readonly HEADER_NAME = 'Cache-Interceptor';\n  private static readonly HEADER_VALUE_CACHE_RESPONSE = 'cache-response';\n  private static readonly HEADER_VALUE_CACHE_CLEAR = 'clear-cache';\n\n  constructor( duration: number) {\n    this.durationMins = duration || null;\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let headerValue = req.headers.get(HttpCacheInterceptor.HEADER_NAME);\n    req = req.clone({ headers: req.headers.delete(HttpCacheInterceptor.HEADER_NAME) });\n\n    if (req.method !== 'GET' || !headerValue) {\n      return next.handle(req);\n    }\n\n    if (headerValue == HttpCacheInterceptor.HEADER_VALUE_CACHE_CLEAR) {\n      this.cache.clear();\n      return next.handle(req);\n    }\n\n    const cachedResponse = this.cache.get(req.urlWithParams);\n    if (cachedResponse && !this.isReponseExpired(cachedResponse)) {\n      return Observable.of(cachedResponse.response);\n    }\n\n    const cacheResponse = (headerValue == HttpCacheInterceptor.HEADER_VALUE_CACHE_RESPONSE);\n\n    return next.handle(req).do(event => {\n      if (event instanceof HttpResponse && cacheResponse) {\n        this.cache.set(req.urlWithParams, { response: event.clone(), timestamp: Date.now() });\n      }\n    });\n  }\n\n  private isReponseExpired(cachedResponse: any) {\n    if (!this.durationMins) return false;\n    return Date.now() > cachedResponse.timestamp + (this.durationMins * 60000);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_INTERCEPTOR_DURATION_MINS, ] }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}