{"version":3,"sources":["../../src/providers/http-cache-interceptor.ts"],"names":[],"mappings":"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","file":"http-cache-interceptor.js","sourceRoot":"","sourcesContent":["import { Injectable, Inject, InjectionToken, isDevMode } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Rx';\nimport { Storage } from '@ionic/storage';\n\nexport const HTTP_CACHE_INTERCEPTOR_DURATION_MINS = new InjectionToken<number>('httpCache.mins');\nexport const HTTP_CACHE_INTERCEPTOR_STORE_CACHE = new InjectionToken<boolean>('httpCache.store');\nconst HTTP_CACHE_STORAGE = 'HTTP_CACHE_STORAGE';\n\n\nexport class HttpCacheInterceptor implements HttpInterceptor {\n\n  private cache = new Map<string, { response: HttpResponse<any>, timestamp: number }>();\n\n  private durationMins = null;\n  private storeCache = null;\n  private static readonly HEADER_NAME = 'Cache-Interceptor';\n  private static readonly HEADER_VALUE_CACHE_RESPONSE = 'cache-response';\n  private static readonly HEADER_VALUE_CACHE_CLEAR = 'clear-cache';\n\n  constructor(\n     duration: number,\n     store: boolean,\n    private storage: Storage\n  ) {\n    this.durationMins = duration || null;\n    if (isDevMode() && store) {\n      this.storeCache = true;\n      this.loadCacheFromStorage();\n    }\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let headerValue = req.headers.get(HttpCacheInterceptor.HEADER_NAME);\n    req = req.clone({ headers: req.headers.delete(HttpCacheInterceptor.HEADER_NAME) });\n\n    if (req.method !== 'GET' || !headerValue) {\n      return next.handle(req);\n    }\n\n    if (headerValue == HttpCacheInterceptor.HEADER_VALUE_CACHE_CLEAR) {\n      this.clearCache();\n      return next.handle(req);\n    }\n\n    const cachedResponse = this.cache.get(req.urlWithParams);\n    if (cachedResponse && !this.isReponseExpired(cachedResponse)) {\n      return Observable.of(cachedResponse.response);\n    }\n\n    const cacheResponse = (headerValue == HttpCacheInterceptor.HEADER_VALUE_CACHE_RESPONSE);\n\n    return next.handle(req).do(event => {\n      if (event instanceof HttpResponse && cacheResponse) {\n        this.setToCache(req.urlWithParams, { response: event.clone(), timestamp: Date.now() });\n      }\n    });\n  }\n\n  private isReponseExpired(cachedResponse: any) {\n    if (!this.durationMins) return false;\n    return Date.now() > cachedResponse.timestamp + (this.durationMins * 60000);\n  }\n\n  private async loadCacheFromStorage() {\n    await this.storage.ready();\n    let cacheFromStorage = await this.storage.get(HTTP_CACHE_STORAGE);\n    if (cacheFromStorage) {\n      this.cache = <Map<string, { response: HttpResponse<any>, timestamp: number }>>JSON.parse(cacheFromStorage);\n    }\n  }\n\n  private setToCache(key: string, value: { response: HttpResponse<any>, timestamp: number }) {\n    this.cache.set(key, value);\n    if (this.storeCache) {\n      this.storage.ready()\n        .then(() => this.storage.set(HTTP_CACHE_STORAGE, JSON.stringify(this.cache)));\n    }\n  }\n\n  private async clearCache() {\n    this.cache.clear();\n    if (this.storeCache) {\n      this.storage.ready()\n        .then(() => this.storage.remove(HTTP_CACHE_STORAGE));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_INTERCEPTOR_DURATION_MINS, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_INTERCEPTOR_STORE_CACHE, ] }, ]},\n{type: Storage, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}