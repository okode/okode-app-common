{"version":3,"sources":["../../src/providers/log.ts"],"names":[],"mappings":"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","file":"log.js","sourceRoot":"","sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\nimport { MMobile } from './mmobile';\nimport { Logger } from './logger';\n\n\nexport class Log implements Logger {\n\n  private static INFO_TAG = '[INFO]';\n  private static DEBUG_TAG = '[DEBUG]';\n  private static WARNING_TAG = '[WARNING]';\n  private static ERROR_TAG = '[ERROR]';\n\n  private nuuma: string;\n  private technicianId: string;\n  private role: string;\n\n  constructor(private mmobile: MMobile) {}\n\n  /**\n   * Set user identifier to add it into the log lines\n   * @param nuuma identifier\n   * @param technicianId sub-identifier\n   */\n  setUser(nuuma: string, technicianId?: string) {\n    this.nuuma = nuuma;\n    if (technicianId != null) {\n      this.technicianId = technicianId;\n    }\n  }\n\n  setRole(role: string) {\n    this.role = role;\n  }\n\n  i(message?: any, ...optionalParams: any[]) {\n    this.print(Log.INFO_TAG, message, optionalParams);\n  }\n\n  d(message?: any, ...optionalParams: any[]) {\n    if (isDevMode()) {\n      this.print(Log.DEBUG_TAG, message, optionalParams);\n    }\n  }\n\n  w(message?: any, ...optionalParams: any[]) {\n    this.print(Log.WARNING_TAG, message, optionalParams);\n  }\n\n  e(message?: any, ...optionalParams: any[]) {\n    this.print(Log.ERROR_TAG, message, optionalParams);\n  }\n\n  private print(tag: string, message?: any, ...optionalParams: any[]) {\n    let parsedMessage = '';\n    if (typeof message === 'string') {\n      parsedMessage = message;\n    } else {\n      if (message.message) {\n        parsedMessage = message.message;\n      } else {\n        try {\n          parsedMessage = JSON.stringify(message);\n        } catch (stringifyError) {\n          console.log('Error parsing log message: ', stringifyError);\n        }\n      }\n    }\n    let log = `${tag}${this.getUser()}: ${parsedMessage} ${optionalParams.join(' ')}`;\n    switch (tag) {\n      case Log.ERROR_TAG:\n        console.error(log);\n        break;\n      case Log.WARNING_TAG:\n        console.warn(log);\n        break;\n      default:\n        console.log(log);\n    }\n    this.mmobile.writeLog(log);\n    if (typeof fabric != 'undefined') {\n      fabric.Crashlytics.addLog(log);\n    }\n  }\n\n  private getUser() {\n    let userInfo = '';\n    let technician = this.technicianId == null ? '' : ', ' + this.technicianId;\n    if (this.nuuma) {\n      userInfo = ` (${this.nuuma}${technician})`;\n    }\n    if (this.role) {\n       userInfo += ` (${this.role})`;\n    }\n    return userInfo;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MMobile, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}