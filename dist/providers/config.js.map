{"version":3,"sources":["../../src/providers/config.ts"],"names":[],"mappings":"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","file":"config.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Storage } from '@ionic/storage';\nimport { AppVersion } from '@ionic-native/app-version';\nimport { HttpClient } from '@angular/common/http';\nimport { ActionSheetController, ToastController, Platform } from 'ionic-angular';\nimport { Log } from './log';\n\ntype PromiseResolve = (value?: void | PromiseLike<void>) => void;\ntype PromiseReject = (reason?: any) => void;\n\n\nexport class Config {\n\n  private static readonly ENVIRONMENT_KEY = 'configEnvironmentKey';\n  private static readonly CONFIG_JSON_PATH = 'assets/config/config.json';\n  private static readonly BROWSER_VERSION: string = 'Browser version';\n\n  private environment: string;\n  private config: any;\n  private updateToVersion: number;\n  private isReady = false;\n  private isInitializing = false;\n  private readyPromiseResolve: PromiseResolve[] = [];\n  private readyPromiseReject: PromiseReject[] = [];\n\n  constructor(\n    private platform: Platform,\n    private storage: Storage,\n    private appVersion: AppVersion,\n    private http: HttpClient,\n    private actionSheetCtrl: ActionSheetController,\n    private toastCtrl: ToastController,\n    private log: Log) {}\n\n  ready() {\n    if (this.isReady) return Promise.resolve();\n    if (!this.isInitializing) {\n        this.isInitializing = true;\n        this.initConfigs();\n    }\n    return new Promise<void>((resolve, reject) => {\n      this.readyPromiseResolve.push(resolve);\n      this.readyPromiseReject.push(reject);\n    });\n  }\n\n  private initConfigs() {\n    this.http\n      .get(Config.CONFIG_JSON_PATH)\n      .subscribe(\n        res => {\n          let configs = res;\n          if (configs == null || Object.keys(configs).length == 0) {\n            this.readyPromiseReject.forEach((reject) => reject());\n            this.log.i(`Config fails: '${Config.CONFIG_JSON_PATH}' is empty or invalid`);\n            return;\n          }\n          let environments = Object.keys(configs).filter(environment => environment !== 'default');\n          if (environments == null || environments.length == 0) {\n            this.setConfig(false, 'default', configs['default']);\n          } else {\n            this.storage.ready().then(() => {\n              this.storage.get(Config.ENVIRONMENT_KEY).then(storedEnvironment => {\n                if (storedEnvironment == null) {\n                  if (environments.length > 1) {\n                    this.log.i('No saved environment detected, will prompt user for selection');\n                    this.showEnvironmentActionSheet(environments, configs);\n                  } else {\n                    let environment = environments[0];\n                    this.setConfig(true, environment, configs['default'], configs[environment]);\n                  }\n                } else {\n                  this.log.i(`Detected saved environment: ${storedEnvironment}`);\n                  this.setConfig(false, storedEnvironment, configs['default'], configs[storedEnvironment]);\n                }\n              });\n            });\n          }\n        },\n        err => {\n          this.readyPromiseReject.forEach((reject) => reject());\n          this.log.i(`Config fails: Not found '${Config.CONFIG_JSON_PATH}'`);\n        }\n      );\n  }\n\n  private showEnvironmentActionSheet(environments: string[], configs: any) {\n    let actionSheet = this.actionSheetCtrl.create({\n      title: 'Select environment',\n      enableBackdropDismiss: false,\n      buttons: environments.map(environment => ({\n          text: environment,\n          handler: (): boolean => {\n            this.setConfig(true, environment, configs['default'], configs[environment]);\n            actionSheet.dismiss().then(() => {\n              this.toastCtrl.create( { message: `${environment} selected`, duration: 2000, position: 'top' } ).present();\n            });\n            return false;\n          }\n        })\n      )\n    });\n    actionSheet.present();\n  }\n\n  private setConfig(save: boolean, environment: string, configBase: any, configEnvironment?: any) {\n    this.log.i(`Applying environment: ${environment}`);\n    this.environment = environment;\n    this.config = configBase;\n    if (configEnvironment != null) {\n      Object.assign(this.config, configEnvironment);\n    }\n    if (save) {\n      this.log.i(`Saving environment: ${environment}`);\n      this.storage.set(Config.ENVIRONMENT_KEY, environment);\n    }\n    this.isReady = true;\n    this.readyPromiseResolve.forEach((resolve) => resolve());\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  getEnvironment() {\n    return this.environment;\n  }\n\n  getUpdateToVersion() {\n    if (this.updateToVersion) return this.updateToVersion;\n    if (!this.config || !this.config.updateToVersion) return 0;\n    this.updateToVersion = this.config.updateToVersion;\n    return this.updateToVersion;\n  }\n\n  async getAppName(browserAppName: string) {\n    await this.platform.ready();\n    if (!this.platform.is('cordova')) {\n        return Promise.resolve(browserAppName);\n    }\n    return this.appVersion.getAppName().then(name => name as string);\n  }\n\n  async getVersionNumber() {\n    await this.platform.ready();\n    let appVersion = Config.BROWSER_VERSION;\n    if (this.platform.is('cordova')) {\n        appVersion = await this.appVersion.getVersionNumber().then(version => version as string);\n    }\n    let versionEnv = this.getConfig().versionEnv;\n    if (versionEnv != null) {\n      appVersion += `-${versionEnv}`;\n    }\n    return appVersion;\n  }\n\n  getMMobileVersion() {\n    let config = this.getConfig();\n    let mmobileVersionNumber = config.mmobileConfigVersion;\n    if (mmobileVersionNumber == null) {\n      this.log.i('Unknown MMobile version. Set \"mmobileConfigVersion\" property on config.xml');\n      return null;\n    }\n    let versionEnv = config.versionEnv;\n    if (versionEnv != null) {\n        mmobileVersionNumber += `-${versionEnv}`;\n    }\n    return mmobileVersionNumber;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: Storage, },\n{type: AppVersion, },\n{type: HttpClient, },\n{type: ActionSheetController, },\n{type: ToastController, },\n{type: Log, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}