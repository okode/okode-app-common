{"version":3,"sources":["../../src/providers/queue-manager.ts"],"names":[],"mappings":"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","file":"queue-manager.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport 'rxjs/add/operator/map';\nimport { Log } from './log';\nimport { Events } from 'ionic-angular';\n\nexport interface IQueueHandler {\n  sync(item: any, srcQueue: Queue): Promise<any>;\n  onQueueRequestDispatched?: (queue: Queue, item: any, success: boolean) => void;\n  onQueueCompleted?: (queue: Queue, dispatchedItems: any[], failedItems: any[]) => void;\n}\n\n/**\n * Business key must be an unique identifier for the object so the queue works properly.\n */\nexport interface Queue {\n  // It's the property name that identifies the queue's object (e.g: 'id').\n  businessKey: string;\n  items: any[];\n  queueHandler: IQueueHandler;\n  isDispatching?: boolean;\n  filterOnSend?: (item: any) => boolean;\n}\n\ninterface QueueResult {\n  failedItems: any[];\n  successItems: any[];\n}\n\n\nexport class QueueManagerService {\n\n  static readonly DISPATCHER_METADATA = '_dispatcherMetadata';\n\n  private isDispatching: boolean;\n  private maxConcurrency = 0;\n  private queues: {\n    [name: string]: Queue;\n  } = {};\n\n  constructor(\n    private log: Log,\n    private events: Events\n  ) {}\n\n  /**\n   * Returns a queue by name.\n   * @param name\n   */\n  getQueue(name: string) {\n    return this.queues[name];\n  }\n\n  /**\n   * Returns queue items by queue name or null if the queue doesn't exist.\n   * @param name\n   */\n  getQueueItems(name: string, filter?: (item: any) => boolean) {\n    let queue = this.getQueue(name);\n    let items = queue != null ? (queue.items || []) : null;\n    if (items == null) return null;\n    if (filter) {\n      return items.filter((i) => filter(i));\n    }\n    return items;\n  }\n\n  /**\n   * Returns all queue names.\n   */\n  getQueueNames() {\n    return Object.keys(this.queues);\n  }\n\n  /**\n   * Configures Queues manager in order to know how many request can be dispatched at a time.\n   * @param maxConcurrency\n   */\n  setMaxConcurrency(maxConcurrency: number) {\n    this.maxConcurrency = maxConcurrency || 0;\n  }\n\n  /**\n   * Addes a new queue to the manager with the name received as parameter.\n   *\n   * @param name\n   * @param queue\n   */\n  addQueue(name: string, queue: Queue) {\n    if (queue != null) {\n      this.queues[name] = queue;\n    }\n  }\n\n  /**\n   * Updates all items of a queue by queue name.\n   *\n   * @param name\n   * @param items\n   */\n  updateQueueItems(name: string, items: any[]) {\n    if (this.queues[name] != null) {\n      this.queues[name].items = items;\n    }\n  }\n\n  /**\n   * Deletes a queue by name.\n   *\n   * @param name\n   */\n  removeQueue(name: string) {\n    delete this.queues[name];\n  }\n\n  /**\n   * Removes a queue item.\n   *\n   * @param name\n   * @param businessValue\n   */\n  removeQueueItem(name: string, businessValue: string) {\n    let queue = this.getQueue(name);\n    if (!queue || !queue.items) return;\n    let index = this.findQueueItemIndex(queue, businessValue);\n    if (index != -1) {\n      queue.items.splice(index, 1);\n    }\n  }\n\n  private findQueueItemIndex(queue: Queue, businessValue: string) {\n    let businessKey = queue.businessKey;\n    return queue.items.findIndex(i => i[businessKey] == businessValue);\n  }\n\n  private ready() {\n    if (this.isDispatching) {\n      this.log.i('Queue manager is still processing items');\n      return false;\n    } else if (navigator.onLine == false) {\n      this.log.i('Queue manager has no network connection');\n      return false;\n    }\n    return true;\n  }\n\n  private initDispatch() {\n    if (!this.ready()) {\n      this.log.i('Queue manager is not ready. Ignoring start');\n      return false;\n    }\n    this.log.i('Initializing sync process');\n    this.isDispatching = true;\n    this.events.publish('queue-manager:started');\n    return true;\n  }\n\n  private stopDispatch() {\n    this.isDispatching = false;\n    this.events.publish('queue-manager:ended');\n  }\n\n  /**\n   * Dispath all queues one after another if the queue manager is not busy.\n   */\n  async dispatchQueues() {\n    if (!this.initDispatch()) return;\n    this.log.i('Dispatching queues');\n    try {\n      let queueNames = this.getQueueNames();\n      for (let name of queueNames) {\n        this.log.i(`Found queue with name: ${name}`);\n        await this.dispatchQueue(this.queues[name]);\n        this.log.i(`Queue with name: ${name} dispatched`);\n      }\n      this.log.i(`All queues were dispatched`);\n      this.stopDispatch();\n    } catch (err) {\n      this.log.e(`Unexpected error dispatching queues. Err: ${JSON.stringify(err)}`);\n      this.stopDispatch();\n    }\n  }\n\n  /**\n   * Dispath a queue by name if the queue manager is not busy.\n   */\n  async dispatchOneQueue(name: string) {\n    if (!this.initDispatch()) return;\n    this.log.i(`Dispatching one queue with name: ${name}`);\n    let queue = this.queues[name];\n    if (queue == null) {\n      this.log.w(`Queue with name ${name} not found`);\n      this.stopDispatch();\n      return;\n    }\n    try {\n      await this.dispatchQueue(queue);\n      this.log.i(`One queue was dispatched: ${name}`);\n      this.stopDispatch();\n    } catch (err) {\n      this.log.e(`Unexpected error dispatching one queue. Err: ${JSON.stringify(err)}`);\n      this.stopDispatch();\n    }\n  }\n\n  private async dispatchQueue(queue: Queue) {\n    if (queue == null) {\n      this.log.w('Queue not found or no items');\n      return;\n    }\n    if (queue.items == null || queue.items.length == 0) {\n      this.log.i('Queue has no items');\n      return;\n    }\n    queue.isDispatching = true;\n    let queueHandler = queue.queueHandler;\n    return this.executeQueueDispatcher(queue).then(res => {\n      queue.isDispatching = true;\n      if (queueHandler.onQueueCompleted) {\n        queueHandler.onQueueCompleted(queue, res.successItems, res.failedItems);\n      }\n      return res;\n    });\n  }\n\n  private takeMaxItems(items: any[], maxConcurrency: number) {\n    if (items == null) return 0;\n    if (maxConcurrency == 0) return items.length;\n    return items.length < maxConcurrency ? items.length : maxConcurrency;\n  }\n\n  /**\n   * Builds a queue items processor and execute it n times dependending on max concurrency.\n   * When the processor ends, the promise will be resolved.\n   *\n   * @param queue\n   */\n  private executeQueueDispatcher(queue: Queue) {\n    let items = [...queue.items];\n    if (queue.filterOnSend) {\n      items = items.filter(item => queue.filterOnSend(item));\n    }\n    let processor = new QueueDispatcher(items, queue.queueHandler, this.log, queue,\n      (item) => this.onItemSuccess(queue, item), (item) => this.onItemFail(queue, item));\n    let promises: any = [];\n    let maxItems = this.takeMaxItems(items, this.maxConcurrency);\n    for (let i = 0; i < maxItems; i++) {\n      this.log.i(`Building a queue dispatcher. Dispatcher ID: ${i}`);\n      promises.push(processor.performSending(i));\n    }\n    return Promise.all(promises).then(() => {\n      this.log.i(`Queue dispatcher finished`);\n      return Promise.resolve(processor.result);\n    });\n  }\n\n  /**\n   * Removes an item sent successfully from its queue by businessKey.\n   *\n   * @param queue\n   * @param item\n   */\n  private onItemSuccess(queue: Queue, item: any) {\n    let businessKey = queue.businessKey;\n    let index = this.findQueueItemIndex(queue, item[businessKey]);\n    if (index != -1) {\n      queue.items.splice(index, 1);\n      let handler = queue.queueHandler;\n      if (handler && handler.onQueueRequestDispatched) {\n        handler.onQueueRequestDispatched(queue, item, true);\n      }\n    } else {\n      this.log.w('Queue manager received a success item but it does not exist in the queue');\n    }\n  }\n\n  /**\n   * Adds metadata on a item which couldn't have been sent successfully by businessKey.\n   * {\n   *  *,\n   *\n   *  \"_dispatcherMetadata\": {\n   *    \"failed\": true\n   *  }\n   * }\n   *\n   * @param queue\n   * @param item\n   */\n  private onItemFail(queue: Queue, item: any) {\n    let businessKey = queue.businessKey;\n    let index = this.findQueueItemIndex(queue, item[businessKey]);\n    if (index != -1) {\n      let queueItem = queue.items[index];\n      queueItem[QueueManagerService.DISPATCHER_METADATA] =\n        queueItem[QueueManagerService.DISPATCHER_METADATA] || {};\n      queueItem[QueueManagerService.DISPATCHER_METADATA].failed = true;\n      let handler = queue.queueHandler;\n      if (handler && handler.onQueueRequestDispatched) {\n        handler.onQueueRequestDispatched(queue, queueItem, false);\n      }\n    } else {\n      this.log.w('Queue manager received a failed item but it does not exist in the queue');\n    }\n  }\n\n  /**\n   * QUEUE DEFAULT FILTERS\n   */\n\n  /**\n   * Filters non failed items so the failed items will not be sent again.\n   */\n  static filterNonFailed(item: any) {\n    let metatada = item[QueueManagerService.DISPATCHER_METADATA];\n    return !metatada || !metatada.failed;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Log, },\n{type: Events, },\n];\n}\n\nclass QueueDispatcher {\n\n  items: any[] = [];\n  service: IQueueHandler;\n  log: Log;\n  queue: Queue;\n  onItemSuccess: Function;\n  onItemFail: Function;\n  result: QueueResult = {\n    failedItems: [],\n    successItems: []\n  };\n\n  constructor(items: any[], service: IQueueHandler, log: Log, srcQueue: Queue,\n    onItemSuccess: (item) => void, onItemFail: (item) => void) {\n    this.items = items;\n    this.service = service;\n    this.log = log;\n    this.queue = srcQueue;\n    this.onItemSuccess = onItemSuccess;\n    this.onItemFail = onItemFail;\n  }\n\n  performSending(processorId: number) {\n    return new Promise<void>((resolve, reject) => {\n      this.log.i(`Process pending sending. Dispatcher ID: ${processorId}`);\n      let item = this.items.pop();\n      if (item == null) {\n        this.log.i(`No more pending sendings. Dispatcher ID: ${processorId}`);\n        return resolve();\n      }\n      this.log.i(\n        `Dispatcher ID: ${processorId} - Uploading ${item.constructor.name} with ID ${item.id}`\n      );\n      this.service.sync(item, this.queue)\n        .then(() => {\n          this.result.successItems.push(item);\n          this.log.i(\n            `Dispatcher ID: ${processorId} - Sent successfully ${item.constructor.name} with ID ${item.id}`\n          );\n          this.onItemSuccess(item);\n          this.performSending(processorId).then(() => resolve());\n        })\n        .catch(err => {\n          this.result.failedItems.push(item);\n          this.log.e(\n            `Processor ID: ${processorId} - Error sending ${item.constructor.name} with ID ${item.id}`\n          );\n          this.onItemFail(item);\n          this.performSending(processorId).then(() => resolve());\n        });\n    });\n  }\n\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}